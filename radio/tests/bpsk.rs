use lazy_static::lazy_static;
use num_complex::Complex;

#[cfg(test)]
use radio::Testy;

static SAMPLE_RATE: f32 = 1e5;
static BAUD_RATE: f32 = 1e4;

static BYTE_1: &[u8] = &[0];
static BYTES_2: &[u8] = &[0,255];
static BYTES_4: &[u8] = &[0,255,0,255];
static BYTES_8: &[u8] = &[0,4,0,255,0,3,0,255];
static BYTES_16: &[u8] = &[0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255];
static BYTES_32: &[u8] = &[0,10,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255];
static BYTES_64: &[u8] = &[0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,8,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255];
static BYTES_128: &[u8] = &[0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255];
static BYTES_256: &[u
static BYTES_512: &[u
static BYTES_1024: &[u
static BYTES_2048: &[u

#[cfg(test)]
#[derive(Clone)]
struct TestData {
    signal_1byte: Vec<Complex<f32>>,
    signal_2bytes: Vec<Complex<f32>>,
    signal_4bytes: Vec<Complex<f32>>,
    signal_8bytes: Vec<Complex<f32>>,
    signal_16bytes: Vec<Complex<f32>>,
    signal_32bytes: Vec<Complex<f32>>,
    signal_64bytes: Vec<Complex<f32>>,
    signal_128bytes: Vec<Complex<f32>>,
    signal_256bytes: Vec<Complex<f32>>,
    signal_512bytes: Vec<Complex<f32>>,
    signal_1024bytes: Vec<Complex<f32>>,
    signal_2048bytes: Vec<Complex<f32>>,
    instance: Testy,
}

#[cfg(test)]
impl Default for TestData {
    fn default() -> Self {
        let mut instance = Testy::new();
        instance.update(SAMPLE_RATE, BAUD_RATE);

        TestData {
            signal_1byte: instance.mod_bpsk(BYTE_1),
            signal_2bytes: instance.mod_bpsk(BYTES_2),
            signal_4bytes: instance.mod_bpsk(BYTES_4),
            signal_8bytes: instance.mod_bpsk(BYTES_8),
            signal_16bytes: instance.mod_bpsk(BYTES_16),
            signal_32bytes: instance.mod_bpsk(BYTES_32),
            signal_64bytes: instance.mod_bpsk(BYTES_64),
            signal_128bytes: instance.mod_bpsk(BYTES_128),
            signal_256bytes: instance.mod_bpsk(BYTES_256),
            signal_512bytes: instance.mod_bpsk(BYTES_512),
            signal_1024bytes: instance.mod_bpsk(BYTES_1024),
            signal_2048bytes: instance.mod_bpsk(BYTES_2048),
            instance,
        }
    }
}

lazy_static! {
    static ref DATA:TestData = TestData::default();
}

#[test]
pub fn bpsk_byte_1() {
    let test = DATA.clone().instance.demod_bpsk(DATA.signal_1byte.clone());

    let expected = BYTE_1;


    assert_eq!(
        test,
        expected,
        "Testing bpsk With 1 Byte of Data.\
            Expected: {:?}\
            Got: {:?}",
        expected,
        test
    )
}


#[test]
pub fn bpsk_byte_2() {
    let test = DATA.clone().instance.demod_bpsk(DATA.signal_2bytes.clone());

    let expected = BYTES_2;




    assert_eq!(
        test,
        expected,
        "Testing bpsk With 1 Byte of Data.\
            Expected: {:?}\
            Got: {:?}",
        expected,
        test
    )
}

#[test]
pub fn bpsk_byte_4() {
    let test = DATA.clone().instance.demod_bpsk(DATA.signal_4bytes.clone());

    let expected = BYTES_4;




    assert_eq!(
        test,
        expected,
        "Testing bpsk With 1 Byte of Data.\
            Expected: {:?}\
            Got: {:?}",
        expected,
        test
    )
}

#[test]
pub fn bpsk_byte_8() {
    let test = DATA.clone().instance.demod_bpsk(DATA.signal_8bytes.clone());

    let expected = BYTES_8;




    assert_eq!(
        test,
        expected,
        "Testing bpsk With 1 Byte of Data.\
            Expected: {:?}\
            Got: {:?}",
        expected,
        test
    )
}

#[test]
pub fn bpsk_byte_16() {
    let test = DATA.clone().instance.demod_bpsk(DATA.signal_16bytes.clone());

    let expected = BYTES_16;




    assert_eq!(
        test,
        expected,
        "Testing bpsk With 1 Byte of Data.\
            Expected: {:?}\
            Got: {:?}",
        expected,
        test
    )
}

#[test]
pub fn bpsk_byte_32() {
    let test = DATA.clone().instance.demod_bpsk(DATA.signal_32bytes.clone());

    let expected = BYTES_32;



    assert_eq!(
        test,
        expected,
        "Testing bpsk With 1 Byte of Data.\
            Expected: {:?}\
            Got: {:?}",
        expected,
        test
    )
}

#[test]
pub fn bpsk_byte_64() {
    let test = DATA.clone().instance.demod_bpsk(DATA.signal_64bytes.clone());

    let expected = BYTES_64;




    assert_eq!(
        test,
        expected,
        "Testing bpsk With 1 Byte of Data.\
            Expected: {:?}\
            Got: {:?}",
        expected,
        test
    )
}

#[test]
pub fn bpsk_byte_128() {
    let test = DATA.clone().instance.demod_bpsk(DATA.signal_128bytes.clone());

    let expected = BYTES_128;





    assert_eq!(
        test,
        expected,
        "Testing bpsk With 1 Byte of Data.\
            Expected: {:?}\
            Got: {:?}",
        expected,
        test
    )
}

#[test]
pub fn bpsk_byte_256() {
    let test = DATA.clone().instance.demod_bpsk(DATA.signal_256bytes.clone());

    let expected = BYTES_256;




    assert_eq!(
        test,
        expected,
        "Testing bpsk With 1 Byte of Data.\
            Expected: {:?}\
            Got: {:?}",
        expected,
        test
    )
}

#[test]
pub fn bpsk_byte_512() {
    let test = DATA.clone().instance.demod_bpsk(DATA.signal_512bytes.clone());

    let expected = BYTES_512;


    assert_eq!(
        test,
        expected,
        "Testing bpsk With 1 Byte of Data.\
            Expected: {:?}\
            Got: {:?}",
        expected,
        test
    )
}

#[test]
pub fn bpsk_byte_1024() {
    let test = DATA.clone().instance.demod_bpsk(DATA.signal_1024bytes.clone());

    let expected = BYTES_1024;


    assert_eq!(
        test,
        expected,
        "Testing bpsk With 1 Byte of Data.\
            Expected: {:?}\
            Got: {:?}",
        expected,
        test
    )
}

#[test]
pub fn bpsk_byte_2048() {
    let test = DATA.clone().instance.demod_bpsk(DATA.signal_2048bytes.clone());

    let expected = BYTES_2048;


    assert_eq!(
        test,
        expected,
        "Testing bpsk With 1 Byte of Data.\
            Expected: {:?}\
            Got: {:?}",
        expected,
        test
    )
}